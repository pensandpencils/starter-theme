// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

@mixin button(
	$borderwidth: 1px,
	$bordercolor: #000,
	$padding: 7px 18px,
	$fontsize: 0.8em,
	$color: #000
) {
	border: $borderwidth solid $bordercolor;
	padding: $padding;
	font-size: $fontsize;
	color: $color;
}

@mixin vertical-align($position: relative) {
	position: $position;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

// Inline

@mixin inline($position: middle) {
	display: inline-block;
	vertical-align: $position;
}

/*--------------------------------------------------------------
## Position Standards - mainly used for Absolutes, saves a
	couple of seconds.
--------------------------------------------------------------*/

@mixin positionTopLeft (
	$position: absolute,
	$top: 0,
	$left: 0,
	$width: 100%,
	$height: 100% ) {

	position: $position;
	top: $top;
	left: $left;
	width: $width;
	height: $height;
}

@mixin positionBottomLeft (
	$position: absolute,
	$bottom: 0,
	$left: 0,
	$width: 100%,
	$height: 100% ) {

	position: $position;
	bottom: $bottom;
	left: $left;
	width: $width;
	height: $height;
}

@mixin positionTopRight (
	$position: absolute,
	$top: 0,
	$right: 0,
	$width: 100%,
	$height: 100% ) {

	position: $position;
	top: $top;
	right: $right;
	width: $width;
	height: $height;
}


@mixin positionBottomRight (
	$position: absolute,
	$bottom: 0,
	$right: 0,
	$width: 100%,
	$height: 100% ) {

	position: $position;
	bottom: $bottom;
	right: $right;
	width: $width;
	height: $height;
}

/*--------------------------------------------------------------
## Give a div an aspect ratio or the same height as its width
--------------------------------------------------------------*/

@mixin divHeightRatio(
	$padding-bottom: 100%
) {
	&:after {
		content: "";
		display: block;
		padding-bottom: $padding-bottom;
	}
}

/*--------------------------------------------------------------
## Placeholder Colors
--------------------------------------------------------------*/

@mixin placeholder(
	$color: #999
) {
	::-webkit-input-placeholder { /* Chrome/Opera/Safari */
		color: $color;
	}
	::-moz-placeholder { /* Firefox 19+ */
		color: $color;
	}
	:-ms-input-placeholder { /* IE 10+ */
		color: $color;
	}
	:-moz-placeholder { /* Firefox 18- */
		color: $color;
	}
}

/*--------------------------------------------------------------
## Transition Mixin
/*--------------------------------------------------------------

eg

a {
  color: gray;
  @include transition(color .3s ease);
  &:hover {
    color: black;
  }
}


--------------------------------------------------------------*/

@mixin transition($args...) {
	-webkit-transition: $args;
	-moz-transition: $args;
	-ms-transition: $args;
	-o-transition: $args;
	transition: $args;
}




/*============================================================================
  Dependency-free breakpoint mixin
    - Based on http://blog.grayghostvisuals.com/sass/sass-media-query-mixin/
    - Usage docs: http://shopify.github.io/Timber/#sass-mixins
==============================================================================*/
$min: min-width;
$max: max-width;
@mixin at-query ($constraint_, $viewport1_, $viewport2_:null) {
	$constraint: $constraint_; $viewport1: $viewport1_; $viewport2: $viewport2_;
	@if type-of($constraint_) == number {
		$viewport1 : $constraint_; $viewport2 : $viewport1_; $constraint : null;
	}
	@if $constraint == $min {
		@media screen and ($min: $viewport1) {
			@content;
		}
	} @else if $constraint == $max {
		@media screen and ($max: $viewport1) {
			@content;
		}
	} @else {
		@media screen and ($min: $viewport1) and ($max: $viewport2) {
			@content;
		}
	}
}
